# -*- coding: utf-8 -*-
"""Classification_modelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yILRfy3ApPIMq_7kmxY1Koxtnberrm5W
"""

# ----------------------------
# Import Libraries
# ----------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    classification_report,
    confusion_matrix,
    roc_curve,
    roc_auc_score
)

# ----------------------------
# Load and Inspect Dataset
# ----------------------------
df = pd.read_csv("/content/Breast_cancer_wisconsin.csv")
print("Initial shape:", df.shape)
print(df.head())

# Drop ID or unnamed columns
df.drop(columns=[col for col in df.columns if 'id' in col.lower() or 'Unnamed' in col], inplace=True)

# Encode target variable
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

# Class balance plot
sns.countplot(x='diagnosis', data=df)
plt.title("Class Distribution (Benign = 0, Malignant = 1)")
plt.xlabel("Diagnosis")
plt.ylabel("Count")
plt.grid(True)
plt.show()

# ----------------------------
# Data Exploration
# ----------------------------
# Correlation heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), cmap='coolwarm', annot=False)
plt.title("Feature Correlation Heatmap")
plt.show()

# Distribution of a few key features
features = ['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean']
df[features].hist(bins=20, figsize=(10, 6))
plt.suptitle("Feature Distributions")
plt.show()

# ----------------------------
# Preprocessing
# ----------------------------
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ----------------------------
# Train Logistic Regression Model
# ----------------------------
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# ----------------------------
# Model Evaluation
# ----------------------------
y_pred = model.predict(X_test_scaled)
y_proba = model.predict_proba(X_test_scaled)[:, 1]

print("\nClassification Report (Threshold = 0.5):")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# ROC Curve and AUC
fpr, tpr, _ = roc_curve(y_test, y_proba)
auc = roc_auc_score(y_test, y_proba)

plt.figure(figsize=(8, 5))
plt.plot(fpr, tpr, label=f"ROC Curve (AUC = {auc:.2f})")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.grid()
plt.show()

# ----------------------------
# Threshold Tuning
# ----------------------------
threshold = 0.6
y_pred_thresh = (y_proba >= threshold).astype(int)

print(f"\nClassification Report (Threshold = {threshold}):")
print(classification_report(y_test, y_pred_thresh))
print("Confusion Matrix (Threshold = 0.6):")
print(confusion_matrix(y_test, y_pred_thresh))

# ----------------------------
# Sigmoid Function Visualization
# ----------------------------
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

z = np.linspace(-10, 10, 100)
sig = sigmoid(z)

plt.figure(figsize=(6, 4))
plt.plot(z, sig)
plt.title("Sigmoid Function")
plt.xlabel("z")
plt.ylabel("sigmoid(z)")
plt.grid(True)
plt.show()